family = ["nato", "edemi", "aleko", "beqa"]
ages = [50, 55, 15, 22]

ages_in_10_years = [age + 10 for age in ages]

name = "My mom's name is: {},My father's name is: {}, My brother's name is: {}, My name is: {}".format(family[0], family[1], family[3], family[2])
age_10_years_later = "We are {} years old, and in 10 years, we will be {} years old.".format(
    ', '.join([str(age) for age in ages]), #                                                    
    ', '.join([str(age) for age in ages_in_10_years])
)

print(name)
print(age_10_years_later)


#1. family = [„თამუნა“, „საბა“, „მათე“]: ეს სტრიქონი განსაზღვრავს სიას სახელწოდებით `ოჯახი~, რომელიც შეიცავს ოჯახის სამი წევრის სახელს.

#2. ასაკი = [30, 25, 35]: ეს ხაზი განსაზღვრავს სიას სახელწოდებით `ასაკი~, რომელიც შეიცავს ოჯახის წევრების შესაბამის ასაკს. თქვენ უნდა შეცვალოთ ეს ასაკი თქვენი ოჯახის წევრების რეალური ასაკით.

#3. ასაკი_10_წელში = [ასაკი + 10 ასაკი ასაკისთვის]: სიის ეს გაგება ითვლის ოჯახის თითოეული წევრის ასაკს 10 წელიწადში და ინახავს მათ `ასაკი_10_წელში~. ის ამატებს 10-ს თითოეულ ასაკს "ასაკის" სიაში.

#4. full_sentence = "დედაჩემის სახელია: {}, ჩემი ძმის სახელია: {}, ჩემი სახელია: {}".format(ოჯახი[0], ოჯახი[1], ოჯახი[2]): ეს line აყალიბებს წინადადებას .format() მეთოდის გამოყენებით წინადადებაში ოჯახის წევრების სახელების ჩასართავად. ის იყენებს სახელებს ოჯახის სიიდან.

#5. age_sentence = "ჩვენ {} წლის ვართ და 10 წელიწადში გავხდებით {} წლის.".format(...):
#    - პირველი {} არის ადგილსამყოფელი მიმდინარე ასაკისთვის, ხოლო მეორე {} არის ადგილი 10 წლის ასაკისთვის.
#    - ', '.join([str(ასაკი) ასაკისთვის ასაკებში]) გარდაქმნის ასაკებს ასაკთა სიაში სტრიქონებად და აერთიანებს მათ მძიმეებით.
#    - `', '.join([str(ასაკი) ასაკისთვის ages_in_10_years])' იგივეს აკეთებს 10 წლის ასაკისთვის.

# 6. და ბოლოს, ბეჭდვა(სრული_წინადადება)“ და `ბეჭდვა(ასაკის_წინადადება) გამოიყენება სრული წინადადების დასაბეჭდად, რომელშიც მოცემულია ოჯახის წევრები და წინადადება მათი ამჟამინდელი ასაკისა და ასაკის მიხედვით, შესაბამისად 10 წელიწადში.

# გამომავალი იქნება მსგავსი რამ:

# დედაჩემს ჰქვია: თამუნა, ჩემს ძმას მქვია: საბა, მე მქვია: მათე
# ჩვენ 30 წლის ვართ, 10 წელიწადში კი 40 წლის გავხდებით.




#ჩვენ ვიყენებთ ', '.join([str(ასაკი) ასაკისთვის ასაკობრივად])' და ', '.join([str(ასაკი) ასაკისთვის ages_in_10_წელში])' შემდეგი მიზეზების გამო:

# 1. *საუკუნების გადაქცევა სიმებიანი*:
#    - სიებში ასაკები და ასაკები_10_წელში, თავდაპირველად რიცხვებია (მთლიანი რიცხვები).
#    - პითონში, თქვენ არ შეგიძლიათ პირდაპირ დააკავშიროთ სტრიქონები მთელ რიცხვებთან. ამ ასაკის დასკვნით წინადადებაში ჩასართავად, ისინი უნდა გადაკეთდეს სტრიქონებად.

# 2. *სიის გააზრება*:
#    - [str(ასაკი) ასაკისთვის ასაკებში] და [str(ასაკი) ასაკისთვის ასაკის_10_წელში] არის სიის გაგება. ისინი იმეორებენ თითოეულ ასაკს სიებში, შესაბამისად, `ასაკი~ და `ასაკი_10_წელში~.
#    - str(age) გარდაქმნის თითოეულ ასაკს სტრიქონად str() ფუნქციის გამოყენებით. ეს აუცილებელია, რადგან .join() მეთოდი მუშაობს სტრიქონებთან და არა მთელ რიცხვებთან.

# 3. *მძიმით შეერთება*:
#    - .join() მეთოდი გამოიყენება გარდაქმნილი ასაკის ერთ სტრიქონში შესაერთებლად, გამოყოფილი მძიმეებით.
#    - ``, '.join(...)` მიუთითებს, რომ ელემენტების გამოსაყოფად გამოყენებული უნდა იყოს მძიმით, რასაც მოჰყვება ინტერვალი.
#    - ეს ქმნის ლამაზად ფორმატირებულ სტრიქონს, სადაც ასაკები გამოყოფილია მძიმეებით, რაც შესაფერისს ხდის წინადადებაში ჩასართავად.

# ასაკების სტრიქონებად გარდაქმნით და ``, „.join(...)`-ის გამოყენებით, თქვენ დარწმუნდებით, რომ ასაკები სწორად არის ფორმატირებული და მძიმით გამოყოფილი ბოლო წინადადებაში, 
# რაც მას უფრო ადვილად იკითხავს და შესაფერისს ხდის წერილში დასაბეჭდად. თქვენი შეტყობინების კონტექსტში.